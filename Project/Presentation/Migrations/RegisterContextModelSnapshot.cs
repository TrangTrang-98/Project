// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Presentation.Migrations
{
    [DbContext(typeof(RegisterContext))]
    partial class RegisterContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0");

            modelBuilder.Entity("ApplicationCore.Entities.Account", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Roles")
                        .HasColumnType("TEXT");

                    b.HasKey("Username");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Department", b =>
                {
                    b.Property<string>("DeptId")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeptName")
                        .HasColumnType("TEXT");

                    b.Property<string>("DoctorHead")
                        .HasColumnType("TEXT");

                    b.Property<string>("DoctorId")
                        .HasColumnType("TEXT");

                    b.HasKey("DeptId");

                    b.HasIndex("DoctorId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("ApplicationCore.Entities.DoctorAggregate.Doctor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountUsername")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("TEXT");

                    b.Property<string>("DepartmentDeptId")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeptId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(40);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("AccountUsername");

                    b.HasIndex("DepartmentDeptId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Enrollment", b =>
                {
                    b.Property<string>("PatientId")
                        .HasColumnType("TEXT");

                    b.Property<string>("DoctorId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("TEXT");

                    b.HasKey("PatientId", "DoctorId");

                    b.HasIndex("DoctorId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("ApplicationCore.Entities.PatientAggregate.Patient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountUsername")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER")
                        .HasMaxLength(84);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(40);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("AccountUsername");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Department", b =>
                {
                    b.HasOne("ApplicationCore.Entities.DoctorAggregate.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");
                });

            modelBuilder.Entity("ApplicationCore.Entities.DoctorAggregate.Doctor", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountUsername");

                    b.HasOne("ApplicationCore.Entities.Department", null)
                        .WithMany("Doctors")
                        .HasForeignKey("DepartmentDeptId");

                    b.OwnsOne("ApplicationCore.Entities.Address", "Address", b1 =>
                        {
                            b1.Property<string>("DoctorId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("City")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Country")
                                .HasColumnType("TEXT");

                            b1.Property<string>("District")
                                .HasColumnType("TEXT");

                            b1.Property<string>("NumHouse")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Street")
                                .HasColumnType("TEXT");

                            b1.HasKey("DoctorId");

                            b1.ToTable("Doctors");

                            b1.WithOwner()
                                .HasForeignKey("DoctorId");
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.Enrollment", b =>
                {
                    b.HasOne("ApplicationCore.Entities.DoctorAggregate.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.PatientAggregate.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationCore.Entities.PatientAggregate.Patient", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountUsername");

                    b.OwnsOne("ApplicationCore.Entities.Address", "Address", b1 =>
                        {
                            b1.Property<string>("PatientId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("City")
                                .HasColumnName("City")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Country")
                                .HasColumnName("Country")
                                .HasColumnType("TEXT");

                            b1.Property<string>("District")
                                .HasColumnName("District")
                                .HasColumnType("TEXT");

                            b1.Property<string>("NumHouse")
                                .HasColumnName("NumHouse")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Street")
                                .HasColumnName("Street")
                                .HasColumnType("TEXT");

                            b1.HasKey("PatientId");

                            b1.ToTable("Patients");

                            b1.WithOwner()
                                .HasForeignKey("PatientId");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
